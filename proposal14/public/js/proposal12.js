// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var App, AppView, ArrivedFeeling, ArrivedFeelingView, ArrivedFeelings, Associate, Associates, BodyLayout, Comment, CommentView, Comments, CommentsView, FsView, HeaderLayout, Layout, LiveFeeling, LiveFeelingView, LiveFeelings, LiveFeelingsView, LoginView, Me, MeView, MyFeeling, MyFeelingView, MyFeelings, MyFeelingsView, NavLayout, NewComment, NewCommentView, NewFeelingView, ReceivedFeeling, ReceivedFeelingView, ReceivedFeelings, ReceivedFeelingsView, Router, SignupView, Wookmark, gW, router, tpl_json, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref31, _ref32, _ref33, _ref34, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    gW = {
      w0: {
        w: '두렵다',
        c: '#556270'
      },
      w1: {
        w: '무섭다',
        c: '#556270'
      },
      w2: {
        w: '우울하다',
        c: '#7f94b0'
      },
      w3: {
        w: '기운이없다',
        c: '#938172'
      },
      w4: {
        w: '무기력하다',
        c: '#938172'
      },
      w5: {
        w: '의욕이없다',
        c: '#938172'
      },
      w6: {
        w: '불안하다',
        c: '#77cca4'
      },
      w7: {
        w: '외롭다',
        c: '#c3ff68'
      },
      w8: {
        w: '걱정된다',
        c: '#14b0d9'
      },
      w9: {
        w: '허전하다',
        c: '#14d925'
      },
      w10: {
        w: '삶이힘들다',
        c: '#e177b3'
      },
      w11: {
        w: '한심하다',
        c: '#ffc6e2'
      },
      w12: {
        w: '짜증난다',
        c: '#c6aae2'
      },
      w13: {
        w: '슬프다',
        c: '#77cca4'
      },
      w14: {
        w: '절망스럽다',
        c: '#d9cbb8'
      },
      w15: {
        w: '화난다',
        c: '#594944'
      },
      w16: {
        w: '쓸쓸하다',
        c: '#758fe6'
      },
      w17: {
        w: '초조하다',
        c: '#b5242e'
      },
      w18: {
        w: '마음아프다',
        c: '#29a9b3'
      },
      w19: {
        w: '열등감느낀다',
        c: '#e8175d'
      },
      w20: {
        w: '사랑스럽다',
        c: '#14b0d9'
      },
      w21: {
        w: '소중하다',
        c: '#c3ff68'
      },
      w22: {
        w: '설레다',
        c: '#14d925'
      },
      w23: {
        w: '즐겁다',
        c: '#e177b3'
      },
      w24: {
        w: '기쁘다',
        c: '#ffc6e2'
      },
      w25: {
        w: '뿌듯하다',
        c: '#c6aae2'
      },
      w26: {
        w: '만족스럽다',
        c: '#77cca4'
      },
      w27: {
        w: '가슴벅차다',
        c: '#d9cbb8'
      },
      w28: {
        w: '자신있다',
        c: '#f0ba3c'
      },
      w29: {
        w: '기운차다',
        c: '#c47147'
      }
    };
    Wookmark = (function() {
      function Wookmark(id) {
        this.id = id;
      }

      Wookmark.prototype.apply = function() {
        var _ref, _ref1;
        if ((_ref = this.handler) != null) {
          if ((_ref1 = _ref.wookmarkInstance) != null) {
            _ref1.clear();
          }
        }
        this.handler = $("#" + this.id + " > li");
        return this.handler.wookmark({
          align: 'left',
          autoResize: true,
          container: $("#" + this.id),
          offset: 16,
          itemWidth: 260
        });
      };

      return Wookmark;

    })();
    Router = (function(_super) {
      __extends(Router, _super);

      function Router() {
        _ref = Router.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Router.prototype.routes = {
        '': 'index',
        'login': 'index',
        'logout': 'logout',
        'my_feelings': 'my_feelings',
        'received_feelings': 'received_feelings'
      };

      Router.prototype.views = {};

      Router.prototype.layout = {};

      Router.prototype.models = {};

      Router.prototype.initialize = function() {
        this.models.me = new Me;
        this.models.live_feelings = new LiveFeelings;
        this.models.associates = new Associates;
        this.models.my = new MyFeelings;
        this.models.received = new ReceivedFeelings;
        this.models.app = new App;
        this.layout.nav = new NavLayout;
        this.layout.header = new HeaderLayout;
        this.layout.body = new BodyLayout;
        this.layout.nav.show(new AppView({
          model: this.models.app
        }));
        return _.bindAll(this, 'index', 'logout', 'my_feelings', 'received_feelings');
      };

      Router.prototype.index = function() {
        if (this.models.app.get('user')) {
          return this.navigate('received_feelings', {
            trigger: true
          });
        } else {
          this.models.app.set({
            user: null,
            menu: '#menu_signup'
          });
          this.layout.header.show(new LoginView);
          return this.layout.body.show();
        }
      };

      Router.prototype.logout = function() {
        return $.ajax({
          url: '../sessions',
          type: 'DELETE',
          dataType: 'json',
          context: this,
          success: function(data) {
            return window.location = '/';
          }
        });
      };

      Router.prototype.my_feelings = function() {
        this.layout.header.show(new NewFeelingView({
          me: this.models.me
        }));
        this.layout.body.show(new MyFeelingsView({
          model: this.models.my
        }));
        this.models.app.set({
          menu: '#menu_my'
        });
        if (this.models.my.length === 0) {
          return this.models.my.fetch_more();
        }
      };

      Router.prototype.received_feelings = function() {
        this.layout.header.show(new LiveFeelingsView({
          me: this.models.me,
          model: this.models.live_feelings
        }));
        this.layout.body.show(new ReceivedFeelingsView({
          model: this.models.received
        }));
        this.models.app.set({
          menu: '#menu_received'
        });
        this.models.me.fetch();
        this.models.live_feelings.fetch();
        if (this.models.received.length === 0) {
          return this.models.received.fetch_more();
        }
      };

      return Router;

    })(Backbone.Router);
    tpl_json = function(model) {
      var obj;
      obj = (model != null ? model.toJSON() : void 0) || {};
      obj['gW'] = gW;
      return obj;
    };
    App = (function(_super) {
      __extends(App, _super);

      function App() {
        _ref1 = App.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      App.prototype.defaults = {
        user: null,
        menu: '#menu_signup'
      };

      App.prototype.url = '../sessions';

      return App;

    })(Backbone.Model);
    Me = (function(_super) {
      __extends(Me, _super);

      function Me() {
        _ref2 = Me.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Me.prototype.defaults = {
        user_id: '',
        n_available_feelings: 0
      };

      Me.prototype.url = '../api/me';

      return Me;

    })(Backbone.Model);
    LiveFeeling = (function(_super) {
      __extends(LiveFeeling, _super);

      function LiveFeeling() {
        _ref3 = LiveFeeling.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      return LiveFeeling;

    })(Backbone.Model);
    LiveFeelings = (function(_super) {
      __extends(LiveFeelings, _super);

      function LiveFeelings() {
        _ref4 = LiveFeelings.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      LiveFeelings.prototype.model = LiveFeeling;

      LiveFeelings.prototype.url = '../api/live_feelings';

      return LiveFeelings;

    })(Backbone.Collection);
    Associate = (function(_super) {
      __extends(Associate, _super);

      function Associate() {
        _ref5 = Associate.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      return Associate;

    })(Backbone.Model);
    Associates = (function(_super) {
      __extends(Associates, _super);

      function Associates() {
        _ref6 = Associates.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      Associates.prototype.url = '../api/associates';

      return Associates;

    })(Backbone.Collection);
    Comment = (function(_super) {
      __extends(Comment, _super);

      function Comment() {
        _ref7 = Comment.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      return Comment;

    })(Backbone.Model);
    Comments = (function(_super) {
      __extends(Comments, _super);

      function Comments() {
        _ref8 = Comments.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      return Comments;

    })(Backbone.Model);
    MyFeeling = (function(_super) {
      __extends(MyFeeling, _super);

      function MyFeeling() {
        _ref9 = MyFeeling.__super__.constructor.apply(this, arguments);
        return _ref9;
      }

      return MyFeeling;

    })(Backbone.Model);
    MyFeelings = (function(_super) {
      __extends(MyFeelings, _super);

      function MyFeelings() {
        _ref10 = MyFeelings.__super__.constructor.apply(this, arguments);
        return _ref10;
      }

      MyFeelings.prototype.model = MyFeeling;

      MyFeelings.prototype.url = '../api/my_feelings';

      MyFeelings.prototype.fetch_more = function() {
        var _ref11;
        return new MyFeelings().fetch({
          data: {
            skip: ((_ref11 = this.models) != null ? _ref11.length : void 0) || 0,
            n: 10
          },
          success: function(model, res) {
            var len, m, _i, _len, _ref12;
            len = router.models.my.length;
            _ref12 = model.models;
            for (_i = 0, _len = _ref12.length; _i < _len; _i++) {
              m = _ref12[_i];
              router.models.my.add(m);
            }
            if (router.models.my.length > len) {
              return router.models.my.trigger('concat', model.models);
            }
          }
        });
      };

      return MyFeelings;

    })(Backbone.Collection);
    ArrivedFeeling = (function(_super) {
      __extends(ArrivedFeeling, _super);

      function ArrivedFeeling() {
        _ref11 = ArrivedFeeling.__super__.constructor.apply(this, arguments);
        return _ref11;
      }

      return ArrivedFeeling;

    })(Backbone.Model);
    ArrivedFeelings = (function(_super) {
      __extends(ArrivedFeelings, _super);

      function ArrivedFeelings() {
        _ref12 = ArrivedFeelings.__super__.constructor.apply(this, arguments);
        return _ref12;
      }

      ArrivedFeelings.prototype.model = ArrivedFeeling;

      ArrivedFeelings.prototype.url = '../api/new_arrived_feelings';

      return ArrivedFeelings;

    })(Backbone.Collection);
    NewComment = (function(_super) {
      __extends(NewComment, _super);

      function NewComment() {
        _ref13 = NewComment.__super__.constructor.apply(this, arguments);
        return _ref13;
      }

      return NewComment;

    })(Backbone.Model);
    ReceivedFeeling = (function(_super) {
      __extends(ReceivedFeeling, _super);

      function ReceivedFeeling() {
        _ref14 = ReceivedFeeling.__super__.constructor.apply(this, arguments);
        return _ref14;
      }

      return ReceivedFeeling;

    })(Backbone.Model);
    ReceivedFeelings = (function(_super) {
      __extends(ReceivedFeelings, _super);

      function ReceivedFeelings() {
        _ref15 = ReceivedFeelings.__super__.constructor.apply(this, arguments);
        return _ref15;
      }

      ReceivedFeelings.prototype.model = ReceivedFeeling;

      ReceivedFeelings.prototype.url = '../api/received_feelings';

      ReceivedFeelings.prototype.fetch_more = function() {
        var _ref16;
        return new ReceivedFeelings().fetch({
          data: {
            skip: ((_ref16 = this.models) != null ? _ref16.length : void 0) || 0,
            n: 10
          },
          success: function(model, res) {
            var len, m, _i, _len, _ref17;
            len = router.models.received.length;
            _ref17 = model.models;
            for (_i = 0, _len = _ref17.length; _i < _len; _i++) {
              m = _ref17[_i];
              router.models.received.add(m);
            }
            if (router.models.received.length > len) {
              return router.models.received.trigger('concat', model.models);
            }
          }
        });
      };

      return ReceivedFeelings;

    })(Backbone.Collection);
    Layout = (function() {
      function Layout() {}

      Layout.prototype.show = function(view) {
        if (this.current_view) {
          this.current_view.close();
        }
        if (!view) {
          return $("#" + this.id).html();
        }
        this.current_view = view;
        this.current_view.render();
        $("#" + this.id).html(this.current_view.el);
        return this.current_view.on_rendered();
      };

      return Layout;

    })();
    NavLayout = (function(_super) {
      __extends(NavLayout, _super);

      function NavLayout() {
        _ref16 = NavLayout.__super__.constructor.apply(this, arguments);
        return _ref16;
      }

      NavLayout.prototype.id = 'fs_navbar';

      return NavLayout;

    })(Layout);
    HeaderLayout = (function(_super) {
      __extends(HeaderLayout, _super);

      function HeaderLayout() {
        _ref17 = HeaderLayout.__super__.constructor.apply(this, arguments);
        return _ref17;
      }

      HeaderLayout.prototype.id = 'fs_header';

      return HeaderLayout;

    })(Layout);
    BodyLayout = (function(_super) {
      __extends(BodyLayout, _super);

      function BodyLayout() {
        _ref18 = BodyLayout.__super__.constructor.apply(this, arguments);
        return _ref18;
      }

      BodyLayout.prototype.id = 'fs_body';

      return BodyLayout;

    })(Layout);
    FsView = (function(_super) {
      __extends(FsView, _super);

      function FsView() {
        _ref19 = FsView.__super__.constructor.apply(this, arguments);
        return _ref19;
      }

      FsView.prototype.attach = function(view) {
        this.views.push(view);
        view.render();
        return view;
      };

      FsView.prototype.detach_all = function() {
        var _results;
        this.views || (this.views = []);
        _results = [];
        while (this.views.length > 0) {
          _results.push(this.views.pop().close());
        }
        return _results;
      };

      FsView.prototype.render = function() {
        console.log("" + this.constructor.name + ".render");
        this.detach_all();
        return this.$el.empty();
      };

      FsView.prototype.on_rendered = function() {};

      FsView.prototype.close = function() {
        this.detach_all();
        this.remove();
        return this.off();
      };

      return FsView;

    })(Backbone.View);
    AppView = (function(_super) {
      __extends(AppView, _super);

      function AppView() {
        _ref20 = AppView.__super__.constructor.apply(this, arguments);
        return _ref20;
      }

      AppView.prototype.template = _.template($('#tpl_navbar').html());

      AppView.prototype.initialize = function() {
        return this.model.on('change', this.render, this);
      };

      AppView.prototype.render = function() {
        AppView.__super__.render.call(this);
        this.$el.html(this.template(this.model.toJSON()));
        this.$el.find('.fs_menu').removeClass('active');
        return $(this.model.get('menu')).addClass('active');
      };

      AppView.prototype.close = function() {
        AppView.__super__.close.call(this);
        return this.model.off('change', this.render);
      };

      return AppView;

    })(FsView);
    LoginView = (function(_super) {
      __extends(LoginView, _super);

      function LoginView() {
        _ref21 = LoginView.__super__.constructor.apply(this, arguments);
        return _ref21;
      }

      LoginView.prototype.events = {
        'click .fs_submit': 'on_submit'
      };

      LoginView.prototype.template = _.template($('#tpl_login').html());

      LoginView.prototype.render = function() {
        LoginView.__super__.render.call(this);
        return this.$el.html(this.template());
      };

      LoginView.prototype.on_submit = function() {
        return $.ajax({
          url: '../sessions',
          type: 'POST',
          dataType: 'json',
          context: this,
          data: {
            user_id: $('#user_id').val(),
            password: $('#password').val()
          },
          success: function(data) {
            router.models.app.set('user', data.user);
            return router.navigate('received_feelings', {
              trigger: true
            });
          }
        });
      };

      return LoginView;

    })(FsView);
    SignupView = (function(_super) {
      __extends(SignupView, _super);

      function SignupView() {
        _ref22 = SignupView.__super__.constructor.apply(this, arguments);
        return _ref22;
      }

      SignupView.prototype.events = {
        'click .fs_submit': 'on_submit'
      };

      SignupView.prototype.template = _.template($('#tpl_signup').html());

      SignupView.prototype.render = function() {
        SignupView.__super__.render.call(this);
        return this.$el.html(this.template());
      };

      SignupView.prototype.on_submit = function() {
        return console.log('signup submit');
      };

      return SignupView;

    })(FsView);
    MeView = (function(_super) {
      __extends(MeView, _super);

      function MeView() {
        _ref23 = MeView.__super__.constructor.apply(this, arguments);
        return _ref23;
      }

      MeView.prototype.template = _.template($('#tpl_me').html());

      MeView.prototype.initialize = function() {
        return this.model.on('sync', this.render, this);
      };

      MeView.prototype.render = function() {
        MeView.__super__.render.call(this);
        return this.$el.html(this.template(this.model.toJSON()));
      };

      MeView.prototype.close = function() {
        MeView.__super__.close.call(this);
        return this.model.off('sync', this.render);
      };

      return MeView;

    })(FsView);
    LiveFeelingView = (function(_super) {
      __extends(LiveFeelingView, _super);

      function LiveFeelingView() {
        _ref24 = LiveFeelingView.__super__.constructor.apply(this, arguments);
        return _ref24;
      }

      LiveFeelingView.prototype.tagName = 'li';

      LiveFeelingView.prototype.template = _.template($('#tpl_live_feeling').html());

      LiveFeelingView.prototype.render = function() {
        LiveFeelingView.__super__.render.call(this);
        return this.$el.html(this.template(tpl_json(this.model)));
      };

      return LiveFeelingView;

    })(FsView);
    LiveFeelingsView = (function(_super) {
      __extends(LiveFeelingsView, _super);

      function LiveFeelingsView() {
        _ref25 = LiveFeelingsView.__super__.constructor.apply(this, arguments);
        return _ref25;
      }

      LiveFeelingsView.prototype.tagName = 'div';

      LiveFeelingsView.prototype.template = _.template($('#tpl_live_status').html());

      LiveFeelingsView.prototype.initialize = function() {
        this.me = this.options.me;
        return this.model.on('sync', this.render, this);
      };

      LiveFeelingsView.prototype.render = function() {
        var holder, m, _i, _len, _ref26;
        LiveFeelingsView.__super__.render.call(this);
        this.$el.html(this.template());
        holder = this.$el.find('#live_holder');
        _ref26 = this.model.models;
        for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
          m = _ref26[_i];
          holder.append(this.attach(new LiveFeelingView({
            model: m
          })).el);
        }
        return this.$el.find('.me_holder').html(this.attach(new MeView({
          model: this.me
        })).el);
      };

      LiveFeelingsView.prototype.close = function() {
        LiveFeelingsView.__super__.close.call(this);
        return this.model.off('sync', this.render);
      };

      return LiveFeelingsView;

    })(FsView);
    NewFeelingView = (function(_super) {
      __extends(NewFeelingView, _super);

      function NewFeelingView() {
        _ref26 = NewFeelingView.__super__.constructor.apply(this, arguments);
        return _ref26;
      }

      NewFeelingView.prototype.events = {
        'click .fs_submit': 'on_submit',
        'click #wordselect>li': 'on_select_word'
      };

      NewFeelingView.prototype.template = _.template($('#tpl_new_feeling').html());

      NewFeelingView.prototype.initialize = function() {
        return this.me = this.options.me;
      };

      NewFeelingView.prototype.render = function() {
        NewFeelingView.__super__.render.call(this);
        this.$el.html(this.template(tpl_json()));
        return this.$el.find('.me_holder').html(this.attach(new MeView({
          model: this.me
        })).el);
      };

      NewFeelingView.prototype.on_select_word = function(e) {
        this.$el.find('#wordselect').find('.active').removeClass('active');
        $(e.target).toggleClass('active');
        if (!this.expanded) {
          this.$el.find('.content0-input').css('display', 'block');
          this.expanded = true;
          return router.layout.body.current_view.wookmark.apply();
        }
      };

      NewFeelingView.prototype.on_submit = function() {
        return $.ajax({
          url: '../api/my_feelings',
          type: 'POST',
          dataType: 'json',
          context: this,
          data: {
            word_id: this.$el.find('#wordselect').find('.active').attr('word-id'),
            content: this.$el.find('#new_feeling_content').val()
          },
          success: function(data) {
            return router.navigate('my_feelings', true);
          }
        });
      };

      return NewFeelingView;

    })(FsView);
    CommentView = (function(_super) {
      __extends(CommentView, _super);

      function CommentView() {
        _ref27 = CommentView.__super__.constructor.apply(this, arguments);
        return _ref27;
      }

      CommentView.prototype.events = {
        'click .icon-remove': 'on_remove',
        'click .icon-heart': 'on_like'
      };

      CommentView.prototype.template = _.template($('#tpl_comment').html());

      CommentView.prototype.initialize = function() {
        return this.model.on('change', this.render, this);
      };

      CommentView.prototype.render = function() {
        CommentView.__super__.render.call(this);
        return this.$el.html(this.template(this.model.toJSON()));
      };

      CommentView.prototype.on_remove = function() {
        return alert('not implemented');
      };

      CommentView.prototype.on_like = function() {
        return alert('not implemented');
      };

      CommentView.prototype.close = function() {
        CommentView.__super__.close.call(this);
        return this.model.off('change', this.render);
      };

      return CommentView;

    })(FsView);
    CommentsView = (function(_super) {
      __extends(CommentsView, _super);

      function CommentsView() {
        _ref28 = CommentsView.__super__.constructor.apply(this, arguments);
        return _ref28;
      }

      CommentsView.prototype.template = _.template($('#tpl_comments').html());

      CommentsView.prototype.initialize = function() {
        return this.model.on('change', this.render, this);
      };

      CommentsView.prototype.render = function() {
        CommentsView.__super__.render.call(this);
        return this.$el.html(this.template(this.model.toJSON()));
      };

      CommentsView.prototype.close = function() {
        CommentsView.__super__.close.call(this);
        return this.model.off('change', this.render);
      };

      return CommentsView;

    })(FsView);
    MyFeelingView = (function(_super) {
      __extends(MyFeelingView, _super);

      function MyFeelingView() {
        _ref29 = MyFeelingView.__super__.constructor.apply(this, arguments);
        return _ref29;
      }

      MyFeelingView.prototype.tagName = 'li';

      MyFeelingView.prototype.events = {
        'click .inner': 'on_expand'
      };

      MyFeelingView.prototype.template = _.template($('#tpl_my_feeling').html());

      MyFeelingView.prototype.initialize = function() {
        this.model.on('change', this.render, this);
        return this.expand = false;
      };

      MyFeelingView.prototype.render = function() {
        var comments, holder, m, u, _ref30;
        MyFeelingView.__super__.render.call(this);
        this.$el.removeClass('rd6').removeClass('_sd0').removeClass('card');
        this.$el.addClass('rd6').addClass('_sd0').addClass('card');
        this.$el.html(this.template(tpl_json(this.model)));
        if (this.expand) {
          console.log('render comments');
          console.log(this.model);
          holder = this.$el.find('.talks');
          holder.empty();
          _ref30 = this.model.get('talks');
          for (u in _ref30) {
            comments = _ref30[u];
            console.log("" + u + ": " + comments);
            m = {
              me: router.models.me.user_id,
              shared: true,
              user_id: u,
              comments: comments
            };
            holder.append(this.attach(new CommentsView({
              model: new Comments(m)
            })).el);
          }
        }
        if (this.on_expand_triggered) {
          this.$el.trigger('refreshWookmark');
        }
        return this.on_expand_triggered = false;
      };

      MyFeelingView.prototype.on_expand = function(event) {
        this.on_expand_triggered = true;
        this.expand = !this.expand;
        return this.render();
      };

      MyFeelingView.prototype.close = function() {
        MyFeelingView.__super__.close.call(this);
        return this.model.off('change', this.render(), this);
      };

      return MyFeelingView;

    })(FsView);
    MyFeelingsView = (function(_super) {
      __extends(MyFeelingsView, _super);

      function MyFeelingsView() {
        _ref30 = MyFeelingsView.__super__.constructor.apply(this, arguments);
        return _ref30;
      }

      MyFeelingsView.prototype.tagName = 'ul';

      MyFeelingsView.prototype.id = 'my_feelings_holder';

      MyFeelingsView.prototype.className = 'fs_tiles';

      MyFeelingsView.prototype.initialize = function() {
        this.wookmark = new Wookmark(this.id);
        this.model.on('concat', this.on_concat, this);
        return $(window).on('scroll', this.on_scroll);
      };

      MyFeelingsView.prototype.render = function() {
        var m, _i, _len, _ref31, _results;
        MyFeelingsView.__super__.render.call(this);
        _ref31 = this.model.models;
        _results = [];
        for (_i = 0, _len = _ref31.length; _i < _len; _i++) {
          m = _ref31[_i];
          _results.push(this.$el.append(this.attach(new MyFeelingView({
            model: m
          })).el));
        }
        return _results;
      };

      MyFeelingsView.prototype.on_rendered = function() {
        console.log('wook.my');
        return this.wookmark.apply();
      };

      MyFeelingsView.prototype.on_scroll = function(e) {
        if ($(window).scrollTop() + $(window).height() > $(document).height() - 100) {
          return router.models.my.fetch_more();
        }
      };

      MyFeelingsView.prototype.on_concat = function(list) {
        var m, _i, _len;
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          m = list[_i];
          this.$el.append(this.attach(new MyFeelingView({
            model: m
          })).el);
        }
        return this.wookmark.apply();
      };

      MyFeelingsView.prototype.close = function() {
        MyFeelingsView.__super__.close.call(this);
        this.model.off('concat', this.on_concat);
        return $(window).off('scroll', this.on_scroll);
      };

      return MyFeelingsView;

    })(FsView);
    NewCommentView = (function(_super) {
      __extends(NewCommentView, _super);

      function NewCommentView() {
        _ref31 = NewCommentView.__super__.constructor.apply(this, arguments);
        return _ref31;
      }

      NewCommentView.prototype.className = 'new_comment';

      NewCommentView.prototype.events = {
        'click .fs_link': 'on_submit'
      };

      NewCommentView.prototype.template = _.template($('#tpl_new_comment').html());

      NewCommentView.prototype.render = function() {
        NewCommentView.__super__.render.call(this);
        this.$el.html(this.template());
        return this;
      };

      NewCommentView.prototype.on_submit = function(event) {
        return alert('not implemented');
      };

      return NewCommentView;

    })(FsView);
    ReceivedFeelingView = (function(_super) {
      __extends(ReceivedFeelingView, _super);

      function ReceivedFeelingView() {
        _ref32 = ReceivedFeelingView.__super__.constructor.apply(this, arguments);
        return _ref32;
      }

      ReceivedFeelingView.prototype.tagName = 'li';

      ReceivedFeelingView.prototype.events = {
        'click .inner': 'on_expand'
      };

      ReceivedFeelingView.prototype.template = _.template($('#tpl_received_feeling').html());

      ReceivedFeelingView.prototype.initialize = function() {
        this.model.on('change', this.render, this);
        return this.expand = false;
      };

      ReceivedFeelingView.prototype.render = function() {
        var comments, holder, m, u, _ref33;
        ReceivedFeelingView.__super__.render.call(this);
        this.$el.removeClass('rd6').removeClass('_sd0').removeClass('card');
        this.$el.addClass('rd6').addClass('_sd0').addClass('card');
        this.$el.html(this.template(tpl_json(this.model)));
        if (this.expand) {
          console.log('render comments');
          holder = this.$el.find('.talks');
          holder.empty();
          _ref33 = this.model.get('talks');
          for (u in _ref33) {
            comments = _ref33[u];
            m = {
              me: router.models.me.user_id,
              shared: true,
              user_id: u,
              comments: comments
            };
            holder.append(this.attach(new CommentsView({
              model: new Comments(m)
            })).el);
          }
        }
        if (this.on_expand_triggered) {
          this.$el.trigger('refreshWookmark');
        }
        return this.on_expand_triggered = false;
      };

      ReceivedFeelingView.prototype.on_expand = function(event) {
        this.on_expand_triggered = true;
        this.expand = !this.expand;
        return this.render();
      };

      ReceivedFeelingView.prototype.close = function() {
        ReceivedFeelingView.__super__.close.call(this);
        return this.model.off('change', this.render);
      };

      return ReceivedFeelingView;

    })(FsView);
    ReceivedFeelingsView = (function(_super) {
      __extends(ReceivedFeelingsView, _super);

      function ReceivedFeelingsView() {
        _ref33 = ReceivedFeelingsView.__super__.constructor.apply(this, arguments);
        return _ref33;
      }

      ReceivedFeelingsView.prototype.tagName = 'ul';

      ReceivedFeelingsView.prototype.id = 'received_feelings_holder';

      ReceivedFeelingsView.prototype.className = 'fs_tiles';

      ReceivedFeelingsView.prototype.events = {
        'click .fs_more': 'on_more'
      };

      ReceivedFeelingsView.prototype.template = _.template($('#tpl_feelings').html());

      ReceivedFeelingsView.prototype.initialize = function() {
        this.wookmark = new Wookmark(this.id);
        this.model.on('prepend', this.on_prepend, this);
        this.model.on('concat', this.on_concat, this);
        return $(window).on('scroll', this.on_scroll);
      };

      ReceivedFeelingsView.prototype.render = function() {
        var m, _i, _len, _ref34, _results;
        ReceivedFeelingsView.__super__.render.call(this);
        this.$el.append(this.attach(new ArrivedFeelingView).el);
        _ref34 = this.model.models;
        _results = [];
        for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
          m = _ref34[_i];
          _results.push(this.$el.append(this.attach(new ReceivedFeelingView({
            model: m
          })).el));
        }
        return _results;
      };

      ReceivedFeelingsView.prototype.on_rendered = function() {
        console.log('wook');
        return this.wookmark.apply();
      };

      ReceivedFeelingsView.prototype.on_scroll = function() {
        if ($(window).scrollTop() + $(window).height() > $(document).height() - 100) {
          return router.models.received.fetch_more();
        }
      };

      ReceivedFeelingsView.prototype.on_concat = function(list) {
        var m, _i, _len;
        console.log('concat');
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          m = list[_i];
          this.$el.append(this.attach(new ReceivedFeelingView({
            model: m
          })).el);
        }
        return this.wookmark.apply();
      };

      ReceivedFeelingsView.prototype.on_prepend = function(model) {
        this.model.models.unshift(model);
        this.$el.find('#arrived_feeling').after(this.attach(new ReceivedFeelingView({
          model: model
        })).el);
        return this.wookmark.apply();
      };

      ReceivedFeelingsView.prototype.on_more = function(event) {
        return this.model.fetch_more();
      };

      ReceivedFeelingsView.prototype.close = function() {
        ReceivedFeelingsView.__super__.close.call(this);
        this.model.off('concat', this.on_concat);
        this.model.off('prepend', this.on_prepend);
        return $(window).off('scroll', this.on_scroll);
      };

      return ReceivedFeelingsView;

    })(FsView);
    ArrivedFeelingView = (function(_super) {
      __extends(ArrivedFeelingView, _super);

      function ArrivedFeelingView() {
        _ref34 = ArrivedFeelingView.__super__.constructor.apply(this, arguments);
        return _ref34;
      }

      ArrivedFeelingView.prototype.tagName = 'li';

      ArrivedFeelingView.prototype.id = 'arrived_feeling';

      ArrivedFeelingView.prototype.events = {
        'click #receive_arrived': 'on_receive',
        'click #flipcard': 'on_flip'
      };

      ArrivedFeelingView.prototype.template = _.template($('#tpl_arrived_feeling').html());

      ArrivedFeelingView.prototype.holder_template = _.template($('#tpl_arrived_holder').html());

      ArrivedFeelingView.prototype.initialize = function() {
        this.model = new ArrivedFeelings;
        this.model.on('sync', this.render, this);
        return router.models.me.on('sync', this.render, this);
      };

      ArrivedFeelingView.prototype.render = function() {
        ArrivedFeelingView.__super__.render.call(this);
        this.$el.removeClass('rd6').removeClass('_sd0').removeClass('card');
        if (this.model.length > 0) {
          this.$el.addClass('rd6').addClass('_sd0').addClass('card');
          this.$el.html(this.template(tpl_json(this.model.at(0))));
        } else {
          this.$el.addClass('rd6').addClass('card');
          this.$el.html(this.holder_template(router.models.me.toJSON()));
        }
        return this;
      };

      ArrivedFeelingView.prototype.on_receive = function(event) {
        console.log('on_receive');
        return this.model.fetch();
      };

      ArrivedFeelingView.prototype.on_flip = function(event) {
        var model;
        console.log('on_flip');
        model = this.model.at(0);
        return $.ajax({
          url: "../api/new_arrived_feelings/" + (model.get('id')),
          type: 'PUT',
          dataType: 'json',
          context: this,
          success: function(data) {
            this.model.reset();
            this.model.trigger('sync');
            return router.models.received.trigger('prepend', new ReceivedFeeling(data));
          }
        });
      };

      ArrivedFeelingView.prototype.close = function() {
        ArrivedFeelingView.__super__.close.call(this);
        this.model.off('sync', this.render);
        return router.models.me.off('sync', this.render);
      };

      return ArrivedFeelingView;

    })(FsView);
    router = new Router;
    $.ajaxSetup({
      statusCode: {
        401: function() {
          return window.location = '/';
        },
        403: function() {
          return window.location = '/';
        }
      }
    });
    return Backbone.history.start();
  });

}).call(this);
