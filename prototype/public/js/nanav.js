// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var AllFeelingsView, AllThoughts, AllThoughtsView, AppRouter, Feeling, FeelingView, Feelings, LoginView, NewThoughtView, Thought, ThoughtView, Thoughts, ThoughtsView, WORDMAP, Word, WordView, WordsView, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    WORDMAP = {
      w0: '외롭다',
      w1: '마음아프다',
      w2: '쓸쓸하다',
      w3: '기쁘다',
      w4: '기운차다',
      w5: '기운이없다',
      w6: '우울하다',
      w7: '만족스럽다',
      w8: '걱정된다',
      w9: '삶이힘들다',
      w10: '초조하다',
      w11: '허전하다',
      w12: '무섭다',
      w13: '두렵다',
      w14: '열등감느낀다',
      w15: '의욕이없다',
      w16: '사랑스럽다',
      w17: '소중하다',
      w18: '설레다',
      w19: '즐겁다'
    };
    Thought = (function(_super) {
      __extends(Thought, _super);

      function Thought() {
        _ref = Thought.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Thought.prototype.url = '../api/thoughts';

      return Thought;

    })(Backbone.Model);
    Thoughts = (function(_super) {
      __extends(Thoughts, _super);

      function Thoughts() {
        _ref1 = Thoughts.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Thoughts.prototype.model = Thought;

      Thoughts.prototype.url = '../api/thoughts';

      return Thoughts;

    })(Backbone.Collection);
    AllThoughts = (function(_super) {
      __extends(AllThoughts, _super);

      function AllThoughts() {
        _ref2 = AllThoughts.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      AllThoughts.prototype.model = Thought;

      AllThoughts.prototype.url = '../api/allthoughts';

      return AllThoughts;

    })(Backbone.Collection);
    Word = (function(_super) {
      __extends(Word, _super);

      function Word() {
        _ref3 = Word.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      Word.prototype.url = '../api/words';

      return Word;

    })(Backbone.Model);
    Feeling = (function(_super) {
      __extends(Feeling, _super);

      function Feeling() {
        _ref4 = Feeling.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      Feeling.prototype.url = '../api/allfeelings';

      return Feeling;

    })(Backbone.Model);
    Feelings = (function(_super) {
      __extends(Feelings, _super);

      function Feelings() {
        _ref5 = Feelings.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      Feelings.prototype.model = Feeling;

      Feelings.prototype.url = '../api/allfeelings';

      return Feelings;

    })(Backbone.Collection);
    ThoughtsView = (function(_super) {
      __extends(ThoughtsView, _super);

      function ThoughtsView() {
        _ref6 = ThoughtsView.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      ThoughtsView.prototype.tagName = 'ul';

      ThoughtsView.prototype.initialize = function() {
        return this.model.bind('reset', this.render, this);
      };

      ThoughtsView.prototype.render = function(event) {
        var thought, _i, _len, _ref7;
        $('.subtitle').html("MY THOUGHTS");
        _ref7 = this.model.models;
        for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
          thought = _ref7[_i];
          this.$el.append(new ThoughtView({
            model: thought
          }).render().el);
        }
        return this;
      };

      return ThoughtsView;

    })(Backbone.View);
    ThoughtView = (function(_super) {
      __extends(ThoughtView, _super);

      function ThoughtView() {
        _ref7 = ThoughtView.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      ThoughtView.prototype.tagName = 'li';

      ThoughtView.prototype.template = _.template($('#tpl-thought').html());

      ThoughtView.prototype.render = function(event) {
        this.model.set('word', WORDMAP[this.model.get('word')]);
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      return ThoughtView;

    })(Backbone.View);
    WordView = (function(_super) {
      __extends(WordView, _super);

      function WordView() {
        _ref8 = WordView.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      WordView.prototype.tagName = 'button';

      WordView.prototype.render = function(event) {
        this.$el.addClass('btn');
        this.$el.addClass('word');
        this.$el.attr('id', this.model);
        this.$el.html(WORDMAP[this.model]);
        return this;
      };

      return WordView;

    })(Backbone.View);
    WordsView = (function(_super) {
      __extends(WordsView, _super);

      function WordsView() {
        _ref9 = WordsView.__super__.constructor.apply(this, arguments);
        return _ref9;
      }

      WordsView.prototype.tagName = 'div';

      WordsView.prototype.id = 'wordcloud';

      WordsView.prototype.render = function(event) {
        var word, _i, _len, _ref10;
        this.$el.addClass('btn-group');
        this.$el.attr('data-toggle', 'buttons-radio');
        _ref10 = this.model;
        for (_i = 0, _len = _ref10.length; _i < _len; _i++) {
          word = _ref10[_i];
          this.$el.append(new WordView({
            model: word
          }).render().el);
        }
        return this;
      };

      return WordsView;

    })(Backbone.View);
    NewThoughtView = (function(_super) {
      __extends(NewThoughtView, _super);

      function NewThoughtView() {
        _ref10 = NewThoughtView.__super__.constructor.apply(this, arguments);
        return _ref10;
      }

      NewThoughtView.prototype.tagName = 'div';

      NewThoughtView.prototype.template = _.template($('#tpl-newthought').html());

      NewThoughtView.prototype.events = {
        'click #save-btn': 'save'
      };

      NewThoughtView.prototype.initialize = function() {
        return this.model.bind('reset', this.render, this);
      };

      NewThoughtView.prototype.render = function(event) {
        $('.subtitle').html("NEW THOUGHT");
        this.$el.append(this.template());
        return this;
      };

      NewThoughtView.prototype.save = function() {
        console.log($('#wordcloud').children());
        console.log($('#wordcloud').children('.active').attr('id'));
        this.model.set({
          word: $('#wordcloud').children('.active').attr('id'),
          feeltxt: $('#feeltxt').val(),
          thought: $('#thought').val()
        });
        console.log(this.model);
        if (!(this.model.get('word') && this.model.get('feeltxt') && this.model.get('thought'))) {
          alert('fill all inputs');
          return;
        }
        console.log('before save');
        return this.model.save({
          success: function(data) {
            return window.location.replace('#thoughts');
          }
        });
      };

      return NewThoughtView;

    })(Backbone.View);
    AllThoughtsView = (function(_super) {
      __extends(AllThoughtsView, _super);

      function AllThoughtsView() {
        _ref11 = AllThoughtsView.__super__.constructor.apply(this, arguments);
        return _ref11;
      }

      AllThoughtsView.prototype.tagName = 'ul';

      AllThoughtsView.prototype.initialize = function() {
        return this.model.bind('reset', this.render, this);
      };

      AllThoughtsView.prototype.render = function(event) {
        var thought, _i, _len, _ref12;
        $('.subtitle').html("RECEIVED THOUGHTS");
        _ref12 = this.model.models;
        for (_i = 0, _len = _ref12.length; _i < _len; _i++) {
          thought = _ref12[_i];
          this.$el.append(new ThoughtView({
            model: thought
          }).render().el);
        }
        return this;
      };

      return AllThoughtsView;

    })(Backbone.View);
    FeelingView = (function(_super) {
      __extends(FeelingView, _super);

      function FeelingView() {
        _ref12 = FeelingView.__super__.constructor.apply(this, arguments);
        return _ref12;
      }

      FeelingView.prototype.tagName = 'div';

      FeelingView.prototype.template = _.template($('#tpl-feeling').html());

      FeelingView.prototype.render = function(event) {
        this.model.set('word', WORDMAP[this.model.get('word')]);
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      return FeelingView;

    })(Backbone.View);
    AllFeelingsView = (function(_super) {
      __extends(AllFeelingsView, _super);

      function AllFeelingsView() {
        _ref13 = AllFeelingsView.__super__.constructor.apply(this, arguments);
        return _ref13;
      }

      AllFeelingsView.prototype.tagName = 'ul';

      AllFeelingsView.prototype.initialize = function() {
        return this.model.bind('reset', this.render, this);
      };

      AllFeelingsView.prototype.render = function(event) {
        var feeling, _i, _len, _ref14;
        $('.subtitle').html("ALL FEELINGS");
        _ref14 = this.model.models;
        for (_i = 0, _len = _ref14.length; _i < _len; _i++) {
          feeling = _ref14[_i];
          this.$el.append(new FeelingView({
            model: feeling
          }).render().el);
        }
        return this;
      };

      return AllFeelingsView;

    })(Backbone.View);
    LoginView = (function(_super) {
      __extends(LoginView, _super);

      function LoginView() {
        _ref14 = LoginView.__super__.constructor.apply(this, arguments);
        return _ref14;
      }

      LoginView.prototype.tagName = 'div';

      LoginView.prototype.template = _.template($('#tpl-login').html());

      LoginView.prototype.events = {
        'click #login-btn': 'login'
      };

      LoginView.prototype.render = function(event) {
        this.$el.html(this.template());
        return this;
      };

      LoginView.prototype.login = function(event) {
        return $.ajax({
          url: '../login',
          type: 'POST',
          dataType: 'json',
          data: {
            userid: $('#userid').val()
          },
          success: function(data) {
            return window.location.replace('#');
          }
        });
      };

      return LoginView;

    })(Backbone.View);
    $.ajaxSetup({
      statusCode: {
        401: function() {
          return window.location.replace('/#login');
        },
        403: function() {
          return window.location.replace('/#login');
        }
      }
    });
    AppRouter = (function(_super) {
      __extends(AppRouter, _super);

      function AppRouter() {
        _ref15 = AppRouter.__super__.constructor.apply(this, arguments);
        return _ref15;
      }

      AppRouter.prototype.routes = {
        "": "thoughts",
        "login": "login",
        "logout": "login",
        "thoughts": "thoughts",
        "thoughts/new": "newthought",
        "allthoughts": "allthoughts",
        "allfeelings": "allfeelings"
      };

      AppRouter.prototype.login = function() {
        return $('#content').html(new LoginView({}).render().el);
      };

      AppRouter.prototype.logout = function() {
        return $.ajax({
          url: '../api/logout',
          dataType: 'json',
          success: function(data) {
            return window.location.replace('/#login');
          }
        });
      };

      AppRouter.prototype.thoughts = function() {
        console.log('thoughts');
        this.thoughts = new Thoughts;
        return this.thoughts.fetch({
          success: function(model, res) {
            return $('#content').html(new ThoughtsView({
              model: model
            }).render().el);
          }
        });
      };

      AppRouter.prototype.newthought = function() {
        $('#content').html(new WordsView({
          model: Object.keys(WORDMAP)
        }).render().el);
        this.thought = new Thought;
        return this.thought.fetch({
          success: function(model, res) {
            return $('#content').append(new NewThoughtView({
              model: model
            }).render().el);
          }
        });
      };

      AppRouter.prototype.allthoughts = function() {
        this.thoughts = new AllThoughts;
        return this.thoughts.fetch({
          success: function(model, res) {
            return $('#content').html(new AllThoughtsView({
              model: model
            }).render().el);
          }
        });
      };

      AppRouter.prototype.allfeelings = function() {
        this.feelings = new Feelings;
        return this.feelings.fetch({
          success: function(model, res) {
            return $('#content').html(new AllFeelingsView({
              model: model
            }).render().el);
          }
        });
      };

      return AppRouter;

    })(Backbone.Router);
    new AppRouter;
    return Backbone.history.start();
  });

}).call(this);
