// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var App, AppView, ArrivedFeeling, ArrivedFeelingView, ArrivedFeelings, Associate, Associates, BodyLayout, Comment, CommentView, EmptyBodyView, FeelingsHolderView, FsView, HeaderLayout, Layout, LiveFeelings, LoginView, Me, MyFeeling, MyFeelingView, MyFeelings, MyFeelingsView, NavLayout, NewComment, NewCommentView, NewFeelingView, ReceivedFeeling, ReceivedFeelingView, ReceivedFeelings, ReceivedFeelingsView, Router, SignupView, Wookmark, gW, router, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    gW = {
      w00: {
        w: '두렵다',
        c: '#556270'
      },
      w01: {
        w: '무섭다',
        c: ''
      },
      w02: {
        w: '우울하다',
        c: '#7f94b0'
      },
      w03: {
        w: '기운이없다',
        c: ''
      },
      w04: {
        w: '무기력하다',
        c: ''
      },
      w05: {
        w: '의욕이없다',
        c: ''
      },
      w06: {
        w: '불안하다',
        c: ''
      },
      w07: {
        w: '외롭다',
        c: ''
      },
      w08: {
        w: '걱정된다',
        c: ''
      },
      w09: {
        w: '허전하다',
        c: ''
      },
      w10: {
        w: '삶이힘들다',
        c: ''
      },
      w11: {
        w: '한심하다',
        c: ''
      },
      w12: {
        w: '짜증난다',
        c: ''
      },
      w13: {
        w: '슬프다',
        c: ''
      },
      w14: {
        w: '절망스럽다',
        c: ''
      },
      w15: {
        w: '화난다',
        c: ''
      },
      w16: {
        w: '쓸쓸하다',
        c: ''
      },
      w17: {
        w: '초조하다',
        c: ''
      },
      w18: {
        w: '마음아프다',
        c: ''
      },
      w19: {
        w: '열등감느낀다',
        c: ''
      },
      w20: {
        w: '사랑스럽다',
        c: ''
      },
      w21: {
        w: '소중하다',
        c: ''
      },
      w22: {
        w: '설레다',
        c: ''
      },
      w23: {
        w: '즐겁다',
        c: ''
      },
      w24: {
        w: '기쁘다',
        c: ''
      },
      w25: {
        w: '뿌듯하다',
        c: ''
      },
      w26: {
        w: '만족스럽다',
        c: ''
      },
      w27: {
        w: '가슴벅차다',
        c: ''
      },
      w28: {
        w: '자신있다',
        c: ''
      },
      w29: {
        w: '기운차다',
        c: ''
      }
    };
    Wookmark = (function() {
      function Wookmark(id) {
        this.id = id;
      }

      Wookmark.prototype.apply = function() {
        var _ref, _ref1;
        if ((_ref = this.handler) != null) {
          if ((_ref1 = _ref.wookmarkInstance) != null) {
            _ref1.clear();
          }
        }
        this.handler = $("#" + this.id + " > li");
        return this.handler.wookmark({
          align: 'left',
          autoResize: true,
          container: $("#" + this.id),
          offset: 16,
          itemWidth: 226,
          fillEmptySpace: true
        });
      };

      return Wookmark;

    })();
    Router = (function(_super) {
      __extends(Router, _super);

      function Router() {
        _ref = Router.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Router.prototype.routes = {
        '': 'index',
        'login': 'index',
        'logout': 'logout',
        'my_feelings': 'my_feelings',
        'received_feelings': 'received_feelings'
      };

      Router.prototype.views = {};

      Router.prototype.layout = {};

      Router.prototype.models = {};

      Router.prototype.initialize = function() {
        this.models.me = new Me;
        this.models.live_feelings = new LiveFeelings;
        this.models.associates = new Associates;
        this.models.my = new MyFeelings;
        this.models.received = new ReceivedFeelings;
        this.models.app = new App;
        this.layout.nav = new NavLayout;
        this.layout.header = new HeaderLayout;
        this.layout.body = new BodyLayout;
        this.layout.nav.show(new AppView({
          model: this.models.app
        }));
        return _.bindAll(this, 'index', 'logout', 'my_feelings', 'received_feelings');
      };

      Router.prototype.index = function() {
        if (this.models.app.get('user')) {
          return this.navigate('received_feelings', {
            trigger: true
          });
        } else {
          this.models.app.set({
            user: null,
            menu: '#menu_signup'
          });
          this.layout.header.show(new SignupView);
          return this.layout.body.show(new EmptyBodyView);
        }
      };

      Router.prototype.logout = function() {
        return $.ajax({
          url: '../sessions',
          type: 'DELETE',
          dataType: 'json',
          context: this,
          success: function(data) {
            return window.location = '/';
          }
        });
      };

      Router.prototype.my_feelings = function() {
        this.layout.header.show(new NewFeelingView({
          me: this.models.me,
          live_feelings: this.models.live_feelings,
          associates: this.models.associates
        }));
        this.layout.body.show(new MyFeelingsView({
          model: this.models.my
        }));
        this.models.app.fetch();
        this.models.app.set({
          menu: '#menu_my'
        });
        this.models.me.fetch();
        this.models.live_feelings.fetch();
        this.models.associates.fetch();
        if (this.models.my.length === 0) {
          return this.models.my.fetch_more();
        }
      };

      Router.prototype.received_feelings = function() {
        this.layout.header.show(new NewFeelingView({
          me: this.models.me,
          live_feelings: this.models.live_feelings,
          associates: this.models.associates
        }));
        this.layout.body.show(new ReceivedFeelingsView({
          model: this.models.received
        }));
        this.models.app.fetch();
        this.models.app.set({
          menu: '#menu_received'
        });
        this.models.me.fetch();
        this.models.live_feelings.fetch();
        this.models.associates.fetch();
        if (this.models.received.length === 0) {
          return this.models.received.fetch_more();
        }
      };

      return Router;

    })(Backbone.Router);
    App = (function(_super) {
      __extends(App, _super);

      function App() {
        _ref1 = App.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      App.prototype.defaults = {
        user: null,
        menu: '#menu_signup'
      };

      App.prototype.url = '../sessions';

      return App;

    })(Backbone.Model);
    Me = (function(_super) {
      __extends(Me, _super);

      function Me() {
        _ref2 = Me.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Me.prototype.defaults = {
        n_available_feelings: 0
      };

      Me.prototype.url = '../api/me';

      return Me;

    })(Backbone.Model);
    LiveFeelings = (function(_super) {
      __extends(LiveFeelings, _super);

      function LiveFeelings() {
        _ref3 = LiveFeelings.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      LiveFeelings.prototype.url = '../api/live_feelings';

      return LiveFeelings;

    })(Backbone.Model);
    Associate = (function(_super) {
      __extends(Associate, _super);

      function Associate() {
        _ref4 = Associate.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      return Associate;

    })(Backbone.Model);
    Associates = (function(_super) {
      __extends(Associates, _super);

      function Associates() {
        _ref5 = Associates.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      Associates.prototype.url = '../api/associates';

      return Associates;

    })(Backbone.Collection);
    Comment = (function(_super) {
      __extends(Comment, _super);

      function Comment() {
        _ref6 = Comment.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      return Comment;

    })(Backbone.Model);
    MyFeeling = (function(_super) {
      __extends(MyFeeling, _super);

      function MyFeeling() {
        _ref7 = MyFeeling.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      return MyFeeling;

    })(Backbone.Model);
    MyFeelings = (function(_super) {
      __extends(MyFeelings, _super);

      function MyFeelings() {
        _ref8 = MyFeelings.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      MyFeelings.prototype.model = MyFeeling;

      MyFeelings.prototype.url = '../api/my_feelings';

      MyFeelings.prototype.fetch_more = function() {
        var _ref9;
        return new MyFeelings().fetch({
          data: {
            skip: ((_ref9 = this.models) != null ? _ref9.length : void 0) || 0,
            n: 10
          },
          success: function(model, res) {
            return router.models.my.trigger('concat', model.models);
          }
        });
      };

      return MyFeelings;

    })(Backbone.Collection);
    ArrivedFeeling = (function(_super) {
      __extends(ArrivedFeeling, _super);

      function ArrivedFeeling() {
        _ref9 = ArrivedFeeling.__super__.constructor.apply(this, arguments);
        return _ref9;
      }

      return ArrivedFeeling;

    })(Backbone.Model);
    ArrivedFeelings = (function(_super) {
      __extends(ArrivedFeelings, _super);

      function ArrivedFeelings() {
        _ref10 = ArrivedFeelings.__super__.constructor.apply(this, arguments);
        return _ref10;
      }

      ArrivedFeelings.prototype.model = ArrivedFeeling;

      ArrivedFeelings.prototype.url = '../api/new_arrived_feelings';

      return ArrivedFeelings;

    })(Backbone.Collection);
    NewComment = (function(_super) {
      __extends(NewComment, _super);

      function NewComment() {
        _ref11 = NewComment.__super__.constructor.apply(this, arguments);
        return _ref11;
      }

      return NewComment;

    })(Backbone.Model);
    ReceivedFeeling = (function(_super) {
      __extends(ReceivedFeeling, _super);

      function ReceivedFeeling() {
        _ref12 = ReceivedFeeling.__super__.constructor.apply(this, arguments);
        return _ref12;
      }

      return ReceivedFeeling;

    })(Backbone.Model);
    ReceivedFeelings = (function(_super) {
      __extends(ReceivedFeelings, _super);

      function ReceivedFeelings() {
        _ref13 = ReceivedFeelings.__super__.constructor.apply(this, arguments);
        return _ref13;
      }

      ReceivedFeelings.prototype.model = ReceivedFeeling;

      ReceivedFeelings.prototype.url = '../api/received_feelings';

      ReceivedFeelings.prototype.fetch_more = function() {
        var _ref14;
        return new ReceivedFeelings().fetch({
          data: {
            skip: ((_ref14 = this.models) != null ? _ref14.length : void 0) || 0,
            n: 10
          },
          success: function(model, res) {
            return router.models.received.trigger('concat', model.models);
          }
        });
      };

      return ReceivedFeelings;

    })(Backbone.Collection);
    Layout = (function() {
      function Layout() {}

      Layout.prototype.show = function(view) {
        if (this.current_view) {
          this.current_view.close();
        }
        this.current_view = view;
        return this.current_view.render();
      };

      return Layout;

    })();
    NavLayout = (function(_super) {
      __extends(NavLayout, _super);

      function NavLayout() {
        _ref14 = NavLayout.__super__.constructor.apply(this, arguments);
        return _ref14;
      }

      return NavLayout;

    })(Layout);
    HeaderLayout = (function(_super) {
      __extends(HeaderLayout, _super);

      function HeaderLayout() {
        _ref15 = HeaderLayout.__super__.constructor.apply(this, arguments);
        return _ref15;
      }

      return HeaderLayout;

    })(Layout);
    BodyLayout = (function(_super) {
      __extends(BodyLayout, _super);

      function BodyLayout() {
        _ref16 = BodyLayout.__super__.constructor.apply(this, arguments);
        return _ref16;
      }

      return BodyLayout;

    })(Layout);
    FsView = (function(_super) {
      __extends(FsView, _super);

      function FsView() {
        _ref17 = FsView.__super__.constructor.apply(this, arguments);
        return _ref17;
      }

      FsView.prototype.attach = function(view) {
        this.views.push(view);
        view.render();
        return view;
      };

      FsView.prototype.detach_all = function() {
        var _results;
        this.views || (this.views = []);
        _results = [];
        while (this.views.length > 0) {
          _results.push(this.views.pop().close());
        }
        return _results;
      };

      FsView.prototype.render = function() {
        console.log("" + this.constructor.name + ".render");
        this.detach_all();
        return this.$el.empty();
      };

      FsView.prototype.close = function() {
        this.detach_all();
        this.remove();
        return this.off();
      };

      return FsView;

    })(Backbone.View);
    AppView = (function(_super) {
      __extends(AppView, _super);

      function AppView() {
        _ref18 = AppView.__super__.constructor.apply(this, arguments);
        return _ref18;
      }

      AppView.prototype.events = {
        'click #login_toggle': 'login'
      };

      AppView.prototype.template = _.template($('#tpl_navbar').html());

      AppView.prototype.initialize = function() {
        return this.model.on('change', this.render, this);
      };

      AppView.prototype.render = function() {
        AppView.__super__.render.call(this);
        this.$el.html(this.template(this.model.toJSON()));
        $('#fs_navbar').html(this.$el);
        this.login_view = this.attach(new LoginView);
        $('#fs_navbar .fs_menu').removeClass('active');
        return $(this.model.get('menu')).addClass('active');
      };

      AppView.prototype.login = function(e) {
        return this.login_view.toggle($(e.target));
      };

      AppView.prototype.close = function() {
        AppView.__super__.close.call(this);
        return this.model.off('change', this.render);
      };

      return AppView;

    })(FsView);
    LoginView = (function(_super) {
      __extends(LoginView, _super);

      function LoginView() {
        _ref19 = LoginView.__super__.constructor.apply(this, arguments);
        return _ref19;
      }

      LoginView.prototype.events = {
        'click .fs_submit': 'on_submit'
      };

      LoginView.prototype.template = _.template($('#tpl_login').html());

      LoginView.prototype.render = function() {
        LoginView.__super__.render.call(this);
        this.$el.html(this.template());
        return $('#login_holder').html(this.$el);
      };

      LoginView.prototype.toggle = function(target) {
        var l, t;
        t = target.offset().top + target.outerHeight();
        l = target.offset().left;
        $('#login').css('top', t).css('left', l);
        return $('#login').toggle();
      };

      LoginView.prototype.on_submit = function() {
        return $.ajax({
          url: '../sessions',
          type: 'POST',
          dataType: 'json',
          context: this,
          data: {
            user_id: $('#user_id').val(),
            password: $('#password').val()
          },
          success: function(data) {
            router.models.app.set('user', data.user);
            return router.navigate('received_feelings', {
              trigger: true
            });
          }
        });
      };

      return LoginView;

    })(FsView);
    SignupView = (function(_super) {
      __extends(SignupView, _super);

      function SignupView() {
        _ref20 = SignupView.__super__.constructor.apply(this, arguments);
        return _ref20;
      }

      SignupView.prototype.events = {
        'click .fs_submit': 'on_submit'
      };

      SignupView.prototype.template = _.template($('#tpl_signup').html());

      SignupView.prototype.render = function() {
        SignupView.__super__.render.call(this);
        this.$el.html(this.template());
        return $('#fs_header').html(this.$el);
      };

      SignupView.prototype.on_submit = function() {
        return console.log('signup submit');
      };

      return SignupView;

    })(FsView);
    NewFeelingView = (function(_super) {
      __extends(NewFeelingView, _super);

      function NewFeelingView() {
        _ref21 = NewFeelingView.__super__.constructor.apply(this, arguments);
        return _ref21;
      }

      NewFeelingView.prototype.events = {
        'click .fs_submit': 'on_submit'
      };

      NewFeelingView.prototype.template = _.template($('#tpl_new_feeling').html());

      NewFeelingView.prototype.me_template = _.template($('#tpl_me').html());

      NewFeelingView.prototype.associates_template = _.template($('#tpl_associates').html());

      NewFeelingView.prototype.initialize = function() {
        this.me = this.options.me;
        this.live_feelings = this.options.live_feelings;
        this.associates = this.options.associates;
        this.me.on('sync', this.render_me, this);
        this.live_feelings.on('sync', this.render_live_feelings, this);
        return this.associates.on('sync', this.render_associates, this);
      };

      NewFeelingView.prototype.render = function() {
        NewFeelingView.__super__.render.call(this);
        this.$el.html(this.template());
        return $('#fs_header').html(this.$el);
      };

      NewFeelingView.prototype.render_me = function() {
        console.log('render_me');
        return $('#fs_header_me').html(this.me_template(this.me.toJSON()));
      };

      NewFeelingView.prototype.render_live_feelings = function() {
        var el, n, word, _ref22, _results;
        console.log('render_live_feelings');
        console.log(this.live_feelings);
        el = $('#fs_header_live_feelings');
        el.empty();
        _ref22 = this.live_feelings.attributes;
        _results = [];
        for (word in _ref22) {
          n = _ref22[word];
          _results.push(el.append("<li>" + word + "</li>"));
        }
        return _results;
      };

      NewFeelingView.prototype.render_associates = function() {
        var el, m, _i, _len, _ref22, _results;
        el = $('#fs_header_associates');
        el.empty();
        _ref22 = this.associates.models;
        _results = [];
        for (_i = 0, _len = _ref22.length; _i < _len; _i++) {
          m = _ref22[_i];
          _results.push(el.append(this.associates_template(m.toJSON())));
        }
        return _results;
      };

      NewFeelingView.prototype.on_submit = function() {
        return $.ajax({
          url: '../api/my_feelings',
          type: 'POST',
          dataType: 'json',
          context: this,
          data: {
            word_id: $('#wordselect').find('.active').attr('word-id'),
            content: $('#new_feeling_content').val()
          },
          success: function(data) {
            return router.navigate('my_feelings', true);
          }
        });
      };

      NewFeelingView.prototype.close = function() {
        NewFeelingView.__super__.close.call(this);
        this.me.off('sync', this.render_me);
        this.live_feelings.off('sync', this.render_live_feelings);
        return this.associates.off('sync', this.render_associates);
      };

      return NewFeelingView;

    })(FsView);
    CommentView = (function(_super) {
      __extends(CommentView, _super);

      function CommentView() {
        _ref22 = CommentView.__super__.constructor.apply(this, arguments);
        return _ref22;
      }

      CommentView.prototype.events = {
        'click .icon-remove': 'on_remove',
        'click .icon-heart': 'on_like'
      };

      CommentView.prototype.template = _.template($('#tpl_comment').html());

      CommentView.prototype.initialize = function() {
        return this.model.on('change', this.render, this);
      };

      CommentView.prototype.render = function() {
        CommentView.__super__.render.call(this);
        return this.$el.html(this.template(this.model.toJSON()));
      };

      CommentView.prototype.on_remove = function() {
        return alert('not implemented');
      };

      CommentView.prototype.on_like = function() {
        return alert('not implemented');
      };

      CommentView.prototype.close = function() {
        CommentView.__super__.close.call(this);
        return this.model.off('change', this.render);
      };

      return CommentView;

    })(FsView);
    MyFeelingView = (function(_super) {
      __extends(MyFeelingView, _super);

      function MyFeelingView() {
        _ref23 = MyFeelingView.__super__.constructor.apply(this, arguments);
        return _ref23;
      }

      MyFeelingView.prototype.tagName = 'li';

      MyFeelingView.prototype.events = {
        'click .inner': 'on_expand',
        'click .comments': 'on_expand'
      };

      MyFeelingView.prototype.template = _.template($('#tpl_my_feeling').html());

      MyFeelingView.prototype.initialize = function() {
        return this.model.on('change', this.render, this);
      };

      MyFeelingView.prototype.render = function() {
        var holder, m, _i, _len, _ref24;
        MyFeelingView.__super__.render.call(this);
        this.set_comments_count();
        this.$el.removeClass('rd6').removeClass('_sd0').removeClass('card');
        this.$el.addClass('rd6').addClass('_sd0').addClass('card');
        this.$el.html(this.template(this.model.toJSON()));
        if (this.expand) {
          console.log('render comments');
          holder = this.$el.find('.comments');
          holder.empty();
          _ref24 = this.model.get('comments');
          for (_i = 0, _len = _ref24.length; _i < _len; _i++) {
            m = _ref24[_i];
            console.log(m);
            holder.append(this.attach(new CommentView({
              model: new Comment(m)
            })).el);
          }
          if (!this.expanded) {
            this.$el.trigger('refreshWookmark');
          }
          return this.expanded = true;
        }
      };

      MyFeelingView.prototype.set_comments_count = function() {
        var c, n_comments, n_hearts, _i, _len, _ref24;
        n_comments = n_hearts = 0;
        _ref24 = this.model.get('comments');
        for (_i = 0, _len = _ref24.length; _i < _len; _i++) {
          c = _ref24[_i];
          if (c.type === 'heart') {
            n_hearts++;
          }
          if (c.type === 'comment') {
            n_comments++;
          }
        }
        return this.model.set({
          n_comments: n_comments,
          n_hearts: n_hearts
        });
      };

      MyFeelingView.prototype.on_expand = function(event) {
        if (this.expand) {
          return;
        }
        this.expand = true;
        return this.render();
      };

      MyFeelingView.prototype.close = function() {
        MyFeelingView.__super__.close.call(this);
        return this.model.off('change', this.render(), this);
      };

      return MyFeelingView;

    })(FsView);
    MyFeelingsView = (function(_super) {
      __extends(MyFeelingsView, _super);

      function MyFeelingsView() {
        _ref24 = MyFeelingsView.__super__.constructor.apply(this, arguments);
        return _ref24;
      }

      MyFeelingsView.prototype.tagName = 'ul';

      MyFeelingsView.prototype.id = 'my_feelings_holder';

      MyFeelingsView.prototype.className = 'fs_tiles';

      MyFeelingsView.prototype.initialize = function() {
        this.wookmark = new Wookmark(this.id);
        return this.model.on('concat', this.on_concat, this);
      };

      MyFeelingsView.prototype.render = function() {
        var m, _i, _len, _ref25;
        MyFeelingsView.__super__.render.call(this);
        this.attach(new FeelingsHolderView({
          model: this.model
        }));
        _ref25 = this.model.models;
        for (_i = 0, _len = _ref25.length; _i < _len; _i++) {
          m = _ref25[_i];
          this.$el.append(this.attach(new MyFeelingView({
            model: m
          })).el);
        }
        $('#fs_holder').html(this.$el);
        return this.wookmark.apply();
      };

      MyFeelingsView.prototype.on_concat = function(list) {
        var m, _i, _len;
        this.model.models.concat(list);
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          m = list[_i];
          this.$el.append(this.attach(new MyFeelingView({
            model: m
          })).el);
        }
        return this.wookmark.apply();
      };

      MyFeelingsView.prototype.close = function() {
        MyFeelingsView.__super__.close.call(this);
        return this.model.off('concat', this.on_concat);
      };

      return MyFeelingsView;

    })(FsView);
    FeelingsHolderView = (function(_super) {
      __extends(FeelingsHolderView, _super);

      function FeelingsHolderView() {
        _ref25 = FeelingsHolderView.__super__.constructor.apply(this, arguments);
        return _ref25;
      }

      FeelingsHolderView.prototype.events = {
        'click .fs_more': 'on_more'
      };

      FeelingsHolderView.prototype.template = _.template($('#tpl_feelings').html());

      FeelingsHolderView.prototype.render = function() {
        FeelingsHolderView.__super__.render.call(this);
        this.$el.html(this.template());
        return $('#fs_body').html(this.$el);
      };

      FeelingsHolderView.prototype.on_more = function(event) {
        return this.model.fetch_more();
      };

      return FeelingsHolderView;

    })(FsView);
    EmptyBodyView = (function(_super) {
      __extends(EmptyBodyView, _super);

      function EmptyBodyView() {
        _ref26 = EmptyBodyView.__super__.constructor.apply(this, arguments);
        return _ref26;
      }

      EmptyBodyView.prototype.render = function() {
        EmptyBodyView.__super__.render.call(this);
        return $('#fs_body').empty();
      };

      return EmptyBodyView;

    })(FsView);
    NewCommentView = (function(_super) {
      __extends(NewCommentView, _super);

      function NewCommentView() {
        _ref27 = NewCommentView.__super__.constructor.apply(this, arguments);
        return _ref27;
      }

      NewCommentView.prototype.className = 'new_comment';

      NewCommentView.prototype.events = {
        'click .fs_submit': 'on_submit'
      };

      NewCommentView.prototype.template = _.template($('#tpl_new_comment').html());

      NewCommentView.prototype.render = function() {
        NewCommentView.__super__.render.call(this);
        this.$el.html(this.template());
        return this;
      };

      NewCommentView.prototype.on_submit = function(event) {
        return alert('not implemented');
      };

      return NewCommentView;

    })(FsView);
    ReceivedFeelingView = (function(_super) {
      __extends(ReceivedFeelingView, _super);

      function ReceivedFeelingView() {
        _ref28 = ReceivedFeelingView.__super__.constructor.apply(this, arguments);
        return _ref28;
      }

      ReceivedFeelingView.prototype.tagName = 'li';

      ReceivedFeelingView.prototype.events = {
        'click .icon-comment': 'on_comment',
        'click .icon-heart': 'on_like',
        'click .icon-share-alt': 'on_forward'
      };

      ReceivedFeelingView.prototype.template = _.template($('#tpl_received_feeling').html());

      ReceivedFeelingView.prototype.initialize = function() {
        return this.model.on('change', this.render, this);
      };

      ReceivedFeelingView.prototype.render = function() {
        var type;
        ReceivedFeelingView.__super__.render.call(this);
        this.$el.removeClass('rd6').removeClass('_sd0').removeClass('card');
        this.$el.addClass('rd6').addClass('_sd0').addClass('card');
        this.$el.html(this.template(this.model.toJSON()));
        type = this.model.get('type');
        if (type) {
          this.$el.find('.icon-trans').css('background-color', '#cccccc');
          if (type === 'comment') {
            this.$el.find('.icon-comment').css('background-color', '#44f9b8');
          }
          if (type === 'like') {
            this.$el.find('.icon-heart').css('background-color', '#44f9b8');
          }
          if (type === 'forward') {
            this.$el.find('.icon-share-alt').css('background-color', '#44f9b8');
          }
          this.$el.find('.inputarea').html(this.attach(new NewCommentView).el);
          if (!this.expanded) {
            this.$el.trigger('refreshWookmark');
          }
          this.expanded = true;
        }
        return this;
      };

      ReceivedFeelingView.prototype.on_comment = function(event) {
        return this.model.set('type', 'comment');
      };

      ReceivedFeelingView.prototype.on_like = function(event) {
        return this.model.set('type', 'like');
      };

      ReceivedFeelingView.prototype.on_forward = function(event) {
        return this.model.set('type', 'forward');
      };

      ReceivedFeelingView.prototype.close = function() {
        ReceivedFeelingView.__super__.close.call(this);
        return this.model.off('change', this.render);
      };

      return ReceivedFeelingView;

    })(FsView);
    ReceivedFeelingsView = (function(_super) {
      __extends(ReceivedFeelingsView, _super);

      function ReceivedFeelingsView() {
        _ref29 = ReceivedFeelingsView.__super__.constructor.apply(this, arguments);
        return _ref29;
      }

      ReceivedFeelingsView.prototype.tagName = 'ul';

      ReceivedFeelingsView.prototype.id = 'received_feelings_holder';

      ReceivedFeelingsView.prototype.className = 'fs_tiles';

      ReceivedFeelingsView.prototype.events = {
        'click .fs_more': 'on_more'
      };

      ReceivedFeelingsView.prototype.template = _.template($('#tpl_feelings').html());

      ReceivedFeelingsView.prototype.initialize = function() {
        this.wookmark = new Wookmark(this.id);
        this.model.on('prepend', this.on_prepend, this);
        return this.model.on('concat', this.on_concat, this);
      };

      ReceivedFeelingsView.prototype.render = function() {
        var m, _i, _len, _ref30;
        ReceivedFeelingsView.__super__.render.call(this);
        this.attach(new FeelingsHolderView({
          model: this.model
        }));
        this.$el.append(this.attach(new ArrivedFeelingView).el);
        _ref30 = this.model.models;
        for (_i = 0, _len = _ref30.length; _i < _len; _i++) {
          m = _ref30[_i];
          this.$el.append(this.attach(new ReceivedFeelingView({
            model: m
          })).el);
        }
        $('#fs_holder').html(this.$el);
        return this.wookmark.apply();
      };

      ReceivedFeelingsView.prototype.on_concat = function(list) {
        var m, _i, _len;
        console.log('on_concat');
        this.model.models.concat(list);
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          m = list[_i];
          this.$el.append(this.attach(new ReceivedFeelingView({
            model: m
          })).el);
        }
        return this.wookmark.apply();
      };

      ReceivedFeelingsView.prototype.on_prepend = function(model) {
        this.model.models.unshift(model);
        $('#arrived_feeling').after(this.attach(new ReceivedFeelingView({
          model: model
        })).el);
        return this.wookmark.apply();
      };

      ReceivedFeelingsView.prototype.on_more = function(event) {
        return this.model.fetch_more();
      };

      ReceivedFeelingsView.prototype.close = function() {
        ReceivedFeelingsView.__super__.close.call(this);
        this.model.off('concat', this.on_concat);
        return this.model.off('prepend', this.on_prepend);
      };

      return ReceivedFeelingsView;

    })(FsView);
    ArrivedFeelingView = (function(_super) {
      __extends(ArrivedFeelingView, _super);

      function ArrivedFeelingView() {
        _ref30 = ArrivedFeelingView.__super__.constructor.apply(this, arguments);
        return _ref30;
      }

      ArrivedFeelingView.prototype.tagName = 'li';

      ArrivedFeelingView.prototype.id = 'arrived_feeling';

      ArrivedFeelingView.prototype.events = {
        'click #receive_arrived': 'on_receive',
        'click #flipcard': 'on_flip'
      };

      ArrivedFeelingView.prototype.template = _.template($('#tpl_arrived_feeling').html());

      ArrivedFeelingView.prototype.holder_template = _.template($('#tpl_arrived_holder').html());

      ArrivedFeelingView.prototype.initialize = function() {
        this.model = new ArrivedFeelings;
        this.model.on('sync', this.render, this);
        return router.models.me.on('sync', this.render, this);
      };

      ArrivedFeelingView.prototype.render = function() {
        ArrivedFeelingView.__super__.render.call(this);
        this.$el.removeClass('rd6').removeClass('_sd0').removeClass('card');
        if (this.model.length > 0) {
          this.$el.addClass('rd6').addClass('_sd0').addClass('card');
          this.$el.html(this.template(this.model.toJSON()));
        } else {
          this.$el.addClass('rd6').addClass('card');
          this.$el.html(this.holder_template(router.models.me.toJSON()));
        }
        return this;
      };

      ArrivedFeelingView.prototype.on_receive = function(event) {
        console.log('on_receive');
        return this.model.fetch();
      };

      ArrivedFeelingView.prototype.on_flip = function(event) {
        var model;
        console.log('on_flip');
        console.log(this.model);
        model = this.model.at(0);
        return $.ajax({
          url: "../api/new_arrived_feelings/" + (model.get('id')),
          type: 'PUT',
          dataType: 'json',
          context: this,
          success: function(data) {
            this.model.reset();
            this.model.trigger('sync');
            return router.models.received.trigger('prepend', new ReceivedFeeling(data));
          }
        });
      };

      ArrivedFeelingView.prototype.close = function() {
        ArrivedFeelingView.__super__.close.call(this);
        this.model.off('sync', this.render);
        return router.models.me.off('sync', this.render);
      };

      return ArrivedFeelingView;

    })(FsView);
    router = new Router;
    $.ajaxSetup({
      statusCode: {
        401: function() {
          return window.location = '/';
        },
        403: function() {
          return window.location = '/';
        }
      }
    });
    return Backbone.history.start();
  });

}).call(this);
