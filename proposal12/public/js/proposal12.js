// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var AppRouter, Associate, AssociateView, Associates, AssociatesView, FeelingView, FeelingsView, HeaderHolderView, LiveFeelings, LiveFeelingsView, LoginView, Me, MeView, MyFeeling, MyFeelingView, MyFeelings, MyFeelingsView, NavBar, NavBarView, NewArrivedFeeling, NewArrivedFeelingView, NewArrivedFeelings, NewFeelingView, ReceivedFeeling, ReceivedFeelings, draw_header, draw_login, wookmark, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    wookmark = function() {
      return $('#fs_tiles > li').wookmark({
        align: 'left',
        autoResize: true,
        container: $('#fs_tiles'),
        offset: 16,
        itemWidth: 226
      });
    };
    draw_login = function() {
      $('#fs_navbar').html(new NavBarView({
        model: new NavBar()
      }).render().el);
      $('#fs_header').html(new LoginView().render().el);
      return $('#fs_content').empty();
    };
    draw_header = function() {
      var associates, feelings, me;
      $('#fs_header').html(new HeaderHolderView().render().el);
      $('#fs_header_write').html(new NewFeelingView().render().el);
      $('#wordselect > li').on('click', function(event) {
        $('#wordselect').find('.active').removeClass('active');
        return $(this).addClass('active');
      });
      me = new Me;
      me.fetch({
        success: function() {
          return $('#fs_header_me').html(new MeView({
            model: me
          }).render().el);
        }
      });
      feelings = new LiveFeelings;
      feelings.fetch({
        success: function() {
          return $('#fs_header_live_feelings').html(new LiveFeelingsView({
            model: feelings
          }).render().el);
        }
      });
      associates = new Associates;
      return associates.fetch({
        success: function() {
          return $('#fs_header_associates').html(new AssociatesView({
            model: associates
          }).render().el);
        }
      });
    };
    NavBar = (function(_super) {
      __extends(NavBar, _super);

      function NavBar() {
        _ref = NavBar.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      NavBar.prototype.defaults = {
        menu: 'login'
      };

      NavBar.prototype.url = '../sessions';

      return NavBar;

    })(Backbone.Model);
    Me = (function(_super) {
      __extends(Me, _super);

      function Me() {
        _ref1 = Me.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Me.prototype.url = '../api/me';

      return Me;

    })(Backbone.Model);
    LiveFeelings = (function(_super) {
      __extends(LiveFeelings, _super);

      function LiveFeelings() {
        _ref2 = LiveFeelings.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      LiveFeelings.prototype.url = '../api/live_feelings';

      return LiveFeelings;

    })(Backbone.Model);
    Associate = (function(_super) {
      __extends(Associate, _super);

      function Associate() {
        _ref3 = Associate.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      return Associate;

    })(Backbone.Model);
    Associates = (function(_super) {
      __extends(Associates, _super);

      function Associates() {
        _ref4 = Associates.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      Associates.prototype.model = Associate;

      Associates.prototype.url = '../api/associates';

      return Associates;

    })(Backbone.Collection);
    MyFeeling = (function(_super) {
      __extends(MyFeeling, _super);

      function MyFeeling() {
        _ref5 = MyFeeling.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      return MyFeeling;

    })(Backbone.Model);
    MyFeelings = (function(_super) {
      __extends(MyFeelings, _super);

      function MyFeelings() {
        _ref6 = MyFeelings.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      MyFeelings.prototype.model = MyFeeling;

      MyFeelings.prototype.url = '../api/my_feelings';

      return MyFeelings;

    })(Backbone.Collection);
    NewArrivedFeeling = (function(_super) {
      __extends(NewArrivedFeeling, _super);

      function NewArrivedFeeling() {
        _ref7 = NewArrivedFeeling.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      return NewArrivedFeeling;

    })(Backbone.Model);
    NewArrivedFeelings = (function(_super) {
      __extends(NewArrivedFeelings, _super);

      function NewArrivedFeelings() {
        _ref8 = NewArrivedFeelings.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      NewArrivedFeelings.prototype.model = NewArrivedFeeling;

      NewArrivedFeelings.prototype.url = '../api/new_arrived_feelings';

      return NewArrivedFeelings;

    })(Backbone.Collection);
    ReceivedFeeling = (function(_super) {
      __extends(ReceivedFeeling, _super);

      function ReceivedFeeling() {
        _ref9 = ReceivedFeeling.__super__.constructor.apply(this, arguments);
        return _ref9;
      }

      return ReceivedFeeling;

    })(Backbone.Model);
    ReceivedFeelings = (function(_super) {
      __extends(ReceivedFeelings, _super);

      function ReceivedFeelings() {
        _ref10 = ReceivedFeelings.__super__.constructor.apply(this, arguments);
        return _ref10;
      }

      ReceivedFeelings.prototype.model = ReceivedFeeling;

      ReceivedFeelings.prototype.url = '../api/received_feelings';

      return ReceivedFeelings;

    })(Backbone.Collection);
    NewArrivedFeelingView = (function(_super) {
      __extends(NewArrivedFeelingView, _super);

      function NewArrivedFeelingView() {
        _ref11 = NewArrivedFeelingView.__super__.constructor.apply(this, arguments);
        return _ref11;
      }

      NewArrivedFeelingView.prototype.tagName = 'li';

      NewArrivedFeelingView.prototype.template = _.template($('#tpl_associates').html());

      NewArrivedFeelingView.prototype.render = function(event) {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      return NewArrivedFeelingView;

    })(Backbone.View);
    MyFeelingView = (function(_super) {
      __extends(MyFeelingView, _super);

      function MyFeelingView() {
        _ref12 = MyFeelingView.__super__.constructor.apply(this, arguments);
        return _ref12;
      }

      MyFeelingView.prototype.tagName = 'li';

      MyFeelingView.prototype.template = _.template($('#tpl_my_feeling').html());

      MyFeelingView.prototype.render = function(event) {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      return MyFeelingView;

    })(Backbone.View);
    MyFeelingsView = (function(_super) {
      __extends(MyFeelingsView, _super);

      function MyFeelingsView() {
        _ref13 = MyFeelingsView.__super__.constructor.apply(this, arguments);
        return _ref13;
      }

      MyFeelingsView.prototype.tagName = 'ul';

      MyFeelingsView.prototype.className = 'contentwrap';

      MyFeelingsView.prototype.render = function(event) {
        var feeling, _i, _len, _ref14;
        $('#fs_title').html("MY FEELINGS");
        _ref14 = this.model.models;
        for (_i = 0, _len = _ref14.length; _i < _len; _i++) {
          feeling = _ref14[_i];
          this.$el.append(new FeelingView({
            model: feeling
          }).render().el);
        }
        return this;
      };

      return MyFeelingsView;

    })(Backbone.View);
    FeelingView = (function(_super) {
      __extends(FeelingView, _super);

      function FeelingView() {
        _ref14 = FeelingView.__super__.constructor.apply(this, arguments);
        return _ref14;
      }

      FeelingView.prototype.tagName = 'li';

      FeelingView.prototype.template = _.template($('#tpl_received_feeling').html());

      FeelingView.prototype.render = function(event) {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      return FeelingView;

    })(Backbone.View);
    FeelingsView = (function(_super) {
      __extends(FeelingsView, _super);

      function FeelingsView() {
        _ref15 = FeelingsView.__super__.constructor.apply(this, arguments);
        return _ref15;
      }

      FeelingsView.prototype.tagName = 'ul';

      FeelingsView.prototype.className = 'contentwrap';

      FeelingsView.prototype.render = function(event) {
        var feeling, _i, _len, _ref16;
        $('#fs_title').html("RECEIVED FEELINGS");
        _ref16 = this.model.models;
        for (_i = 0, _len = _ref16.length; _i < _len; _i++) {
          feeling = _ref16[_i];
          this.$el.append(new FeelingView({
            model: feeling
          }).render().el);
        }
        return this;
      };

      return FeelingsView;

    })(Backbone.View);
    AssociateView = (function(_super) {
      __extends(AssociateView, _super);

      function AssociateView() {
        _ref16 = AssociateView.__super__.constructor.apply(this, arguments);
        return _ref16;
      }

      AssociateView.prototype.tagName = 'div';

      AssociateView.prototype.template = _.template($('#tpl_associates').html());

      AssociateView.prototype.render = function(event) {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      return AssociateView;

    })(Backbone.View);
    AssociatesView = (function(_super) {
      __extends(AssociatesView, _super);

      function AssociatesView() {
        _ref17 = AssociatesView.__super__.constructor.apply(this, arguments);
        return _ref17;
      }

      AssociatesView.prototype.tagName = 'div';

      AssociatesView.prototype.template = _.template($('#tpl_associates').html());

      AssociatesView.prototype.render = function(event) {
        var asso, _i, _len, _ref18;
        _ref18 = this.model.models;
        for (_i = 0, _len = _ref18.length; _i < _len; _i++) {
          asso = _ref18[_i];
          this.$el.append(new AssociateView({
            model: asso
          }).render().el);
        }
        return this;
      };

      return AssociatesView;

    })(Backbone.View);
    LiveFeelingsView = (function(_super) {
      __extends(LiveFeelingsView, _super);

      function LiveFeelingsView() {
        _ref18 = LiveFeelingsView.__super__.constructor.apply(this, arguments);
        return _ref18;
      }

      LiveFeelingsView.prototype.tagName = 'ul';

      LiveFeelingsView.prototype.className = 'wordcloud';

      LiveFeelingsView.prototype.render = function(event) {
        var n, word, _ref19;
        _ref19 = this.model.attributes;
        for (word in _ref19) {
          n = _ref19[word];
          this.$el.append("<li>" + word + "</li>");
        }
        return this;
      };

      return LiveFeelingsView;

    })(Backbone.View);
    MeView = (function(_super) {
      __extends(MeView, _super);

      function MeView() {
        _ref19 = MeView.__super__.constructor.apply(this, arguments);
        return _ref19;
      }

      MeView.prototype.tagName = 'div';

      MeView.prototype.template = _.template($('#tpl_me').html());

      MeView.prototype.render = function(event) {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      return MeView;

    })(Backbone.View);
    NewFeelingView = (function(_super) {
      __extends(NewFeelingView, _super);

      function NewFeelingView() {
        _ref20 = NewFeelingView.__super__.constructor.apply(this, arguments);
        return _ref20;
      }

      NewFeelingView.prototype.tagName = 'div';

      NewFeelingView.prototype.template = _.template($('#tpl_new_feeling').html());

      NewFeelingView.prototype.events = {
        'click #new_feeling_submit': 'submit'
      };

      NewFeelingView.prototype.render = function(event) {
        this.$el.html(this.template());
        return this;
      };

      NewFeelingView.prototype.submit = function(event) {
        return $.ajax({
          url: '../api/my_feelings',
          type: 'POST',
          dataType: 'json',
          data: {
            word_id: $('#wordselect').find('.active').attr('word-id'),
            content: $('#new_feeling_content').val()
          },
          success: function(data) {
            return window.location.replace('#my_feelings');
          }
        });
      };

      return NewFeelingView;

    })(Backbone.View);
    HeaderHolderView = (function(_super) {
      __extends(HeaderHolderView, _super);

      function HeaderHolderView() {
        _ref21 = HeaderHolderView.__super__.constructor.apply(this, arguments);
        return _ref21;
      }

      HeaderHolderView.prototype.tagName = 'div';

      HeaderHolderView.prototype.template = _.template($('#tpl_header_holder').html());

      HeaderHolderView.prototype.render = function(event) {
        this.$el.html(this.template());
        return this;
      };

      return HeaderHolderView;

    })(Backbone.View);
    NavBarView = (function(_super) {
      __extends(NavBarView, _super);

      function NavBarView() {
        _ref22 = NavBarView.__super__.constructor.apply(this, arguments);
        return _ref22;
      }

      NavBarView.prototype.tagName = 'div';

      NavBarView.prototype.template = _.template($('#tpl_navbar').html());

      NavBarView.prototype.render = function(event) {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      return NavBarView;

    })(Backbone.View);
    LoginView = (function(_super) {
      __extends(LoginView, _super);

      function LoginView() {
        _ref23 = LoginView.__super__.constructor.apply(this, arguments);
        return _ref23;
      }

      LoginView.prototype.tagName = 'div';

      LoginView.prototype.template = _.template($('#tpl_login').html());

      LoginView.prototype.events = {
        'click #login_btn': 'login'
      };

      LoginView.prototype.render = function(event) {
        this.$el.html(this.template());
        return this;
      };

      LoginView.prototype.login = function(event) {
        return $.ajax({
          url: '../sessions',
          type: 'POST',
          dataType: 'json',
          data: {
            user_id: $('#user_id').val(),
            password: $('#password').val()
          },
          success: function(data) {
            return window.location.replace('/');
          }
        });
      };

      return LoginView;

    })(Backbone.View);
    $.ajaxSetup({
      statusCode: {
        401: function() {
          return draw_login();
        },
        403: function() {
          return draw_login();
        }
      }
    });
    AppRouter = (function(_super) {
      __extends(AppRouter, _super);

      function AppRouter() {
        _ref24 = AppRouter.__super__.constructor.apply(this, arguments);
        return _ref24;
      }

      AppRouter.prototype.routes = {
        "": "received_feelings",
        "logout": "logout",
        "signup": "signup",
        "my_feelings": "my_feelings",
        "received_feelings": "received_feelings"
      };

      AppRouter.prototype.logout = function() {
        return $.ajax({
          url: '../sessions',
          type: 'DELETE',
          dataType: 'json',
          success: function(data) {
            return draw_login();
          }
        });
      };

      AppRouter.prototype.signup = function() {
        return window.location.replace('/');
      };

      AppRouter.prototype.my_feelings = function() {
        var navbar;
        navbar = new NavBar;
        return navbar.fetch({
          success: function(model, res) {
            var feelings;
            model.set('menu', 'my');
            $('#fs_navbar').html(new NavBarView({
              model: model
            }).render().el);
            draw_header();
            feelings = new MyFeelings;
            return feelings.fetch({
              success: function(model, res) {
                $('#fs_content').html(new MyFeelingsView({
                  model: model
                }).render().el);
                return wookmark();
              }
            });
          }
        });
      };

      AppRouter.prototype.received_feelings = function() {
        var navbar;
        navbar = new NavBar;
        return navbar.fetch({
          success: function(model, res) {
            var feelings;
            model.set('menu', 'received');
            $('#fs_navbar').html(new NavBarView({
              model: model
            }).render().el);
            draw_header();
            feelings = new ReceivedFeelings;
            return feelings.fetch({
              success: function(model, res) {
                $('#fs_content').html(new FeelingsView({
                  model: model
                }).render().el);
                return wookmark();
              }
            });
          }
        });
      };

      return AppRouter;

    })(Backbone.Router);
    new AppRouter;
    return Backbone.history.start();
  });

}).call(this);
