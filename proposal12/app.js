// Generated by CoffeeScript 1.6.3
(function() {
  var app, between, express, includes, month, pop3_feelings, remove, require_auth, rw, _comment_cur, _comments, _daily_words, _feeling_cur, _feelings, _float_feeling_cur, _float_feeling_queue, _float_feelings, _my_id, _my_time, _rcv_id, _users;

  express = require('express');

  app = express();

  require_auth = function(req, res, next) {
    console.log("auth: " + req.session.user);
    if (!req.session.user) {
      res.send(401);
    }
    return next();
  };

  app.configure(function() {
    app.use(express.bodyParser());
    app.use(express.cookieParser());
    app.use(express.cookieSession({
      secret: 'deadbeef'
    }));
    app.use(express.logger({
      format: ':method :url'
    }));
    app.use(app.router);
    app.all('/api/*', require_auth);
    return app.use(express["static"]("" + __dirname + "/public"));
  });

  app.get('/', function(req, res) {
    return res.sendfile('public/index.html');
  });

  app.get('/sessions', function(req, res) {
    if (req.session.user) {
      return res.json({
        user_id: req.session.user || false
      });
    } else {
      return res.send(401);
    }
  });

  app.post('/sessions', function(req, res) {
    var password;
    req.session.user = req.body.user_id;
    password = req.body.password;
    return res.json({
      user: req.session.user
    });
  });

  app.del('/sessions', function(req, res) {
    if (req.session.user) {
      delete req.session.user;
      return res.json({});
    } else {
      return res.send(401);
    }
  });

  app.post('/users', function(req, res) {
    return res.json({});
  });

  _users = {};

  _feelings = {};

  _feeling_cur = 0;

  _comments = {};

  _comment_cur = 0;

  _daily_words = {};

  _float_feelings = {};

  _float_feeling_cur = 0;

  _float_feeling_queue = [];

  _my_time = 0;

  _my_id = 0;

  _rcv_id = 0;

  app.get('/api/me', function(req, res) {
    return res.json({
      user_id: req.session.user,
      n_available_feelings: 3
    });
  });

  app.get('/api/live_feelings', function(req, res) {
    return res.json({
      'w0': 10,
      'w10': 3,
      'w20': 2,
      'w29': 8
    });
  });

  app.get('/api/associates', function(req, res) {
    return res.json([
      {
        user_id: 'uuuuu',
        similarity: 1.7,
        word_id: rw()
      }, {
        user_id: 'ppp',
        similarity: 2.7,
        word_id: rw()
      }, {
        user_id: 'asdfef',
        similarity: 3.7,
        word_id: rw()
      }, {
        user_id: 'f73ur',
        similarity: 2.1,
        word_id: rw()
      }, {
        user_id: 'myidififi',
        similarity: 4.7,
        word_id: rw()
      }
    ]);
  });

  app.get('/api/my_feelings', function(req, res) {
    var mon, n, user;
    user = req.session.user;
    mon = req.params.skip || 0;
    n = req.params.n || 3;
    return res.json([
      {
        id: _my_id++,
        time: _my_time++,
        user_id: 'uuuuu',
        word_id: rw(),
        content: 'aefe aefef fa',
        comments: [
          {
            type: 'heart',
            content: '블블블',
            user_id: 'asdf',
            time: 0,
            like: true
          }, {
            type: 'comment',
            content: '블블블asdf',
            user_id: 'qwer',
            time: 0,
            like: false
          }
        ]
      }, {
        id: _my_id++,
        time: _my_time++,
        user_id: 'uuuuu',
        word_id: rw(),
        content: 'aefe aefef fa',
        comments: [
          {
            type: 'heart',
            content: '블블블',
            user_id: 'asdf',
            time: 0,
            like: true
          }, {
            type: 'comment',
            content: '블블블asdf',
            user_id: 'qwer',
            time: 0,
            like: false
          }
        ]
      }, {
        id: _my_id++,
        time: _my_time++,
        user_id: 'uuuuu',
        word_id: rw(),
        content: 'aefe aefef fa',
        comments: [
          {
            type: 'heart',
            content: '블블블',
            user_id: 'asdf',
            time: 0,
            like: true
          }, {
            type: 'comment',
            content: '블블블asdf',
            user_id: 'qwer',
            time: 0,
            like: false
          }
        ]
      }
    ]);
  });

  app.get('/api/my_feelings/:id', function(req, res) {
    var id, mon, n, user;
    id = req.params.id;
    user = req.session.user;
    mon = req.params.skip || 0;
    n = req.params.n || 3;
    return res.json({
      id: _my_id++,
      time: 0,
      user_id: 'uuuuu',
      word_id: rw(),
      content: 'aefe aefef fa',
      comments: [
        {
          type: 'heart',
          content: '블블블',
          user_id: 'asdf',
          time: 0,
          like: true
        }, {
          type: 'comment',
          content: '블블블asdf',
          user_id: 'qwer',
          time: 0,
          like: false
        }
      ]
    });
  });

  app.get('/api/received_feelings', function(req, res) {
    var mon, n, user;
    user = req.session.user;
    mon = req.params.skip || 0;
    n = req.params.n || 3;
    return res.json([
      {
        id: _rcv_id++,
        time: 0,
        user_id: 'f23rf',
        word_id: rw(),
        content: '블라블라블라',
        comment: {
          id: 0,
          type: 'heart',
          content: '블블블',
          user_id: 'asdf',
          time: 0,
          liked: 1
        }
      }, {
        id: _rcv_id++,
        time: 0,
        user_id: 'f23rf',
        word_id: rw(),
        content: '블라블라블라',
        comment: {
          id: 0,
          type: 'heart',
          content: '블블블',
          user_id: 'asdf',
          time: 0,
          liked: 1
        }
      }, {
        id: _rcv_id++,
        time: 0,
        user_id: 'f23rf',
        word_id: rw(),
        content: '블라블라블라',
        comment: {
          id: 0,
          type: 'heart',
          content: '블블블',
          user_id: 'asdf',
          time: 0,
          liked: 1
        }
      }
    ]);
  });

  app.get('/api/received_feelings/:id', function(req, res) {
    var id, mon, n, user;
    id = req.params.id;
    user = req.session.user;
    mon = req.params.skip || 0;
    n = req.params.n || 3;
    return res.json({
      id: _rcv_id++,
      time: 0,
      user_id: 'f23rf',
      word_id: rw(),
      content: '블라블라블라',
      comment: {
        id: 0,
        type: 'heart',
        content: '블블블',
        user_id: 'asdf',
        time: 0,
        liked: 1
      }
    });
  });

  app.get('/api/new_arrived_feelings', function(req, res) {
    var id, mon, n, user;
    id = req.params.id;
    user = req.session.user;
    mon = req.params.skip || 0;
    n = req.params.n || 3;
    return res.json([
      {
        id: 1,
        time: 0,
        user_id: 'f23rf',
        word_id: rw(),
        content: '블라블라블라'
      }
    ]);
  });

  app.put('/api/new_arrived_feelings/:id', function(req, res) {
    var id, user;
    id = req.params.id;
    user = req.session.user;
    return res.json({
      id: 1,
      time: 0,
      user_id: 'f23rf',
      word_id: rw(),
      content: '블라블라블라',
      comment: {
        id: 0,
        type: 'heart',
        content: '블블블',
        user_id: 'asdf',
        time: 0,
        liked: 1
      }
    });
  });

  app.post('/api/my_feelings', function(req, res) {
    var content, user, word_id;
    user = req.session.user;
    word_id = req.body.word_id;
    content = req.body.content;
    console.log("word_id: " + word_id + ", content: " + content);
    return res.json({});
  });

  app.post('/api/received_feelings/:id/comments', function(req, res) {
    var content, id, type, user;
    id = req.params.id;
    user = req.session.user;
    type = req.body.type;
    content = req.body.content;
    console.log("id: " + id + ", type: " + type + ", content: " + content);
    return res.json({});
  });

  app.put('/api/my_feelings/:id/comments/:comment_id', function(req, res) {
    var comment_id, id, like, user;
    id = req.params.id;
    comment_id = req.params.comment_id;
    user = req.session.user;
    like = req.body.like;
    console.log("id: " + id + ", comment_id: " + comment_id + ", like: " + like);
    return res.json({});
  });

  rw = function() {
    return "w" + (Math.floor(Math.random() * 29));
  };

  remove = function(arr, x) {
    return arr.filter(function(a) {
      return a !== x;
    });
  };

  between = function(x, min, max) {
    return x >= min && x <= max;
  };

  includes = function(arr, x) {
    var a, _i, _len;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      a = arr[_i];
      if (a === x) {
        return true;
      }
    }
    return false;
  };

  month = function(mon, gap) {
    return ((mon - 1) + 12 + gap) % 12 + 1;
  };

  pop3_feelings = function() {
    var id, res, _i, _len;
    res = [];
    for (_i = 0, _len = _float_feeling_queue.length; _i < _len; _i++) {
      id = _float_feeling_queue[_i];
      if (res.length === 3) {
        break;
      }
      if (!includes(res, id)) {
        res.push(id);
      }
    }
    return res;
  };

  /* OLD ROUTES*/


  app.listen('3333');

  console.log('listening on 3333');

}).call(this);
